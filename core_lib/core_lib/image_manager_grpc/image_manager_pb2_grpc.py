# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import core_lib.image_manager_grpc.image_manager_pb2 as image__manager__pb2


class ImageManagerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.blur = channel.unary_stream(
        '/image_processor.ImageManager/blur',
        request_serializer=image__manager__pb2.Uuid.SerializeToString,
        response_deserializer=image__manager__pb2.Image.FromString,
        )
    self.ping = channel.unary_unary(
        '/image_processor.ImageManager/ping',
        request_serializer=image__manager__pb2.Ping.SerializeToString,
        response_deserializer=image__manager__pb2.Pong.FromString,
        )


class ImageManagerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def blur(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ping(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImageManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'blur': grpc.unary_stream_rpc_method_handler(
          servicer.blur,
          request_deserializer=image__manager__pb2.Uuid.FromString,
          response_serializer=image__manager__pb2.Image.SerializeToString,
      ),
      'ping': grpc.unary_unary_rpc_method_handler(
          servicer.ping,
          request_deserializer=image__manager__pb2.Ping.FromString,
          response_serializer=image__manager__pb2.Pong.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'image_processor.ImageManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
